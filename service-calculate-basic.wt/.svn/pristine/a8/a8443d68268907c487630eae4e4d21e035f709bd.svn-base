package com.service.tools;

import java.text.SimpleDateFormat;
import java.util.Date;

import com.service.bean.Area;
import com.service.bean.Point;

/**
 * 工具类
 * 
 * @author lj Created on 2015年8月26日
 */
public class CalculateTools {

	/**
	 * 计算两点间的距离
	 * 
	 * @param lng1
	 * @param lat1
	 * @param lng2
	 * @param lat2
	 * @return
	 */
	public static double getTwoPointDistance(double lng1, double lat1, double lng2, double lat2) {
		double PI = 3.1415926535898;
		double R = 6.371229 * (Math.pow(10, 6));
		double x = (lng2 - lng1) * PI * R * Math.cos(((lat1 + lat2) / 2) * PI / 180) / 180;
		double y = (lat2 - lat1) * PI * R / 180;
		double s = Math.sqrt(x * x + y * y);
		return Math.abs(s);
	}

	/**
	 * 检查两个日期是否是同一天
	 * 
	 * @param d1
	 * @param d2
	 * @return true:是同一天</br>
	 *         false:不是同一天
	 */
	public static boolean isSameDay(Date d1, Date d2) {
		if (null == d1 || null == d2) {
			return false;
		}
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if (sdf.format(d1).equals(sdf.format(d2))) {
			return true;
		}
		return false;
	}

	/**
	 * 判断当前坐标点是否在规定的工作区域中
	 * @param p
	 * @param a
	 * @return
	 */
	public static boolean isInArea(Point p, Area a) {
		boolean check = false;
		if (a.getType() == 3) {
			check = isInPolygonArea(p, a);
		} else if (a.getType() == 4) {
			check = isInLineArea(p, a);
		}
		return check;
	}

	public static boolean isInLineArea(Point p, Area a) {
		boolean check = false;
		for (int i = 0; i < a.getPoints().size() - 1; i++) {
			Point p1 = a.getPoints().get(i);
			Point p2 = a.getPoints().get(i + 1);
			double linehight = pointToLine(p1, p2, p);
			if (linehight < a.getLineWidth()) {
				check = true;
			}
		}
		return check;
	}

	public static boolean isInPolygonArea(Point p, Area a) {
		int cross = 0;
		Point p1 = null;
		Point p2 = null;
		for (int i = 0; i < a.getPoints().size(); i++) {
			p1 = a.getPoints().get(i);
			p2 = a.getPoints().get((i + 1) % a.getPoints().size());
			if (p1.getLat() == p2.getLat())
				continue;
			if (p.getLat() < Math.min(p1.getLat(), p2.getLat()))
				continue;
			if (p.getLat() > Math.max(p1.getLat(), p2.getLat()))
				continue;
			if (isPointOnLine(p.getLng(), p.getLat(), p1.getLng(), p1.getLat(), p2.getLng(), p2.getLat())) {
				return true;
			}
			double x = (p.getLat() - p1.getLat()) * (p2.getLng() - p1.getLng()) / (p2.getLat() - p1.getLat()) + p1.getLng();
			if (x > p.getLng())
				cross++;
		}
		return cross % 2 == 1;
	}

	public static double pointToLine(Point p1, Point p2, Point p3) {
		double space = 0;
		double a, b, c;
		a = getTwoPointDistance(p1, p2);
		b = getTwoPointDistance(p1, p3);
		c = getTwoPointDistance(p2, p3);
		if (c + b == a) {
			space = 0;
			return space;
		}
		if (a <= 0.000001) {
			space = b;
			return space;
		}
		if (c * c >= a * a + b * b) {
			space = b;
			return space;
		}
		if (b * b >= a * a + c * c) {
			space = c;
			return space;
		}
		double p = (a + b + c) / 2;
		double s = Math.sqrt(p * (p - a) * (p - b) * (p - c));
		space = 2 * s / a;
		return space;
	}

	public static double getTwoPointDistance(Point p1, Point p2) {
		double PI = 3.1415926535898;
		double R = 6.371229 * (Math.pow(10, 6));
		double x = (p2.getLng() - p1.getLng()) * PI * R * Math.cos(((p1.getLat() + p2.getLat()) / 2) * PI / 180) / 180;
		double y = (p2.getLat() - p1.getLat()) * PI * R / 180;
		double s = Math.sqrt(x * x + y * y);
		return s;
	}

	private static boolean isPointOnLine(double px0, double py0, double px1, double py1, double px2, double py2) {
		boolean flag = false;
		double ESP = 1e-9;
		if ((Math.abs(Multiply(px0, py0, px1, py1, px2, py2)) < ESP) && ((px0 - px1) * (px0 - px2) <= 0)
				&& ((py0 - py1) * (py0 - py2) <= 0)) {
			flag = true;
		}
		return flag;
	}

	private static double Multiply(double px0, double py0, double px1, double py1, double px2, double py2) {
		return ((px1 - px0) * (py2 - py0) - (px2 - px0) * (py1 - py0));
	}
}
