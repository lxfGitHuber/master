package com.service.tools;

import java.math.BigDecimal;

import com.service.bean.Point;

/**
 * @author lxf
 * @Date 2017年12月5日
 */
public class Coordinate {
	
	private static final double pi = 3.1415926535897932384626;
	private static final double a = 6378245.0;
	private static final double ee = 0.00669342162296594323;
	private static final double x_pi = 3.14159265358979324 * 3000.0 / 180.0;
	
	/**
	 * GPS坐标转换为WGS-84坐标
	 * @param p
	 * @return
	 */
	public static Point gpsToWgs84(Point p) {
		if (!outOfChina(p)) {
			double dLat = transformLat(p.getLng() - 105.0, p.getLat() - 35.0);
			double dLon = transformLon(p.getLng() - 105.0, p.getLat() - 35.0);
			double radLat = p.getLat() / 180.0 * pi;
			double magic = Math.sin(radLat);
			magic = 1 - ee * magic * magic;
			double sqrtMagic = Math.sqrt(magic);
			dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi);
			dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi);
			p.setLat(p.getLat() + dLat);
			p.setLng(p.getLng() + dLon);

		}
		return p;
	}

	/**
	 * WGS-84坐标转换为BD-09坐标
	 * @param p
	 * @return
	 */
	public static Point wgs84ToBd09(Point p) {
		double x = p.getLng(), y = p.getLat();
		double z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * x_pi);
		double theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * x_pi);
		p.setLng(z * Math.cos(theta) + 0.0065);
		p.setLat(z * Math.sin(theta) + 0.006);
		return p;
	}

	/**
	 * BD-09坐标转WGS-84坐标
	 * @param p
	 * @return
	 */
	public static Point bd09ToWgs84(Point p) {
		double x = p.getLng() - 0.0065, y = p.getLat() - 0.006;
		double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_pi);
		double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_pi);
		p.setLng(z * Math.cos(theta));
		p.setLat(z * Math.sin(theta));
		return p;
	}
	
	public static boolean outOfChina(Point p) {
		if (p.getLng() < 72.004 || p.getLng() > 137.8347) {
			return true;
		}
		if (p.getLat() < 0.8293 || p.getLat() > 55.8271) {
			return true;
		}
		return false;
	}

	public static double transformLat(double x, double y) {
		double ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y
				+ 0.2 * Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(y * pi) + 40.0 * Math.sin(y / 3.0 * pi)) * 2.0 / 3.0;
		ret += (160.0 * Math.sin(y / 12.0 * pi) + 320 * Math.sin(y * pi / 30.0)) * 2.0 / 3.0;
		return ret;
	}

	public static double transformLon(double x, double y) {
		double ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1
				* Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(x * pi) + 40.0 * Math.sin(x / 3.0 * pi)) * 2.0 / 3.0;
		ret += (150.0 * Math.sin(x / 12.0 * pi) + 300.0 * Math.sin(x / 30.0
				* pi)) * 2.0 / 3.0;
		return ret;
	}
	
	/**
	 * xx°yy′yyyyy  -->  xx.xxxxx°
	 * @param d
	 * @return
	 */
	public static double coordCity009(double d) {
		double x = d / 100;
		double xa = Double.valueOf(String.valueOf(x).split("\\.")[0]);
		BigDecimal b1 = new BigDecimal(Double.toString(x));
		BigDecimal b2 = new BigDecimal(Integer.toString((int) x));
		double xb = b1.subtract(b2).doubleValue();
		xb = xb * 100 / 60;
		return xa + xb;
	}
}
